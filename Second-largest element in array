#include <bits/stdc++.h>
using namespace std;
/*int getLargest(int arr[],int n)
{
    int res=0;
    for(int i=0;i<n;i++)
    {
        if(arr[i]>arr[res])
          res=i;
           
    }
    return res;
}
int secondLargest(int arr[],int n)
{
    int largest = getLargest(arr,n);
    int res=-1;
    for(int i=0;i<n;i++)
    {
        if(arr[i] != arr[largest])
        {
            if(res==-1)
               res=i;
            else if(arr[i]>arr[res])
              res=i;
        }
    }
    return res;
}*/
//The above function do two traversal. You can also do it by sorting function (sort())but it is (nlogn) time
//Below solution is most efficient O(n) T.C. it does only one traversal.
int secondLargest(int arr[] , int n )
{
    int res = -1, largest = 0 ;
    for(int i=1;i<n;i++)
    {
        if(arr[i]>arr[largest])
        {  res = largest;
          largest = i;
        }
        else if(arr[i]<arr[largest])
        {
            if(res== -1 || arr[i]>arr[res])
               res  = i;
        }
    }
    return res;
}

int main()
{
    int arr[] = { 12, 35, 1, 10, 34, 1 };
    int n = sizeof(arr) / sizeof(arr[0]);
    cout<<arr[secondLargest(arr, n)];
    return 0;
}
