/*C++ program to know if  there is a subarray with given sum in array. */
#include <bits/stdc++.h>
using namespace std;
bool knowSum(int arr[],int n,int sum)
{
    int curr_sum, i, j; 
  
    // Pick a starting point 
    for (i = 0; i < n; i++) { 
        curr_sum = arr[i]; 
  
        // try all subarrays starting with 'i' 
        for (j = i + 1; j <= n; j++) { 
            if (curr_sum == sum) { 
                cout << "Sum found between indexes "
                     << i << " and " << j - 1; 
                return 1; 
            } 
            if (curr_sum > sum || j == n) 
                break; 
            curr_sum = curr_sum + arr[j]; 
        } 
    } 
  
    cout << "No subarray found"; 
    return 0; 
} 
//WST
bool isSubSum(int arr[],int n,int sum)
{
    int curr_sum =arr[0], start=0;
    for(int e=1;e<n;e++)
    {
        while(curr_sum >sum && start<e-1)
        {
            curr_sum -= arr[start];
            start++;
        }
        if(curr_sum == sum)
          return true;
       if(e<n)
         curr_sum += arr[e];
    }
    return(curr_sum == sum);
}
    
int main() 
{ 
    int arr[] = { 15, 2, 4, 8, 9, 5, 10, 23 }; 
    int n = sizeof(arr) / sizeof(arr[0]); 
    int sum = 23; 
    cout<<isSubSum(arr, n, sum); 
    return 0; 
} 
  
